{"version":3,"sources":["Components/DateTime/DateTime.jsx","Components/DateTimePretty/DateTimePretty.jsx","Components/Video/Video.jsx","Components/VideoList/VideoList.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["DateTime","props","className","date","withDate","Component","moment","fromNow","this","React","Video","NewDateTime","title","nanoid","src","url","frameBorder","allow","allowFullScreen","VideoList","list","map","item","App","useState","subtract","format","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gVAIe,SAASA,EAASC,GAC/B,OACE,mBAAGC,UAAU,OAAb,SAAqBD,EAAME,O,yCCQhBC,EAXE,SAACC,EAAWF,GAAZ,yDACf,WAAYF,GAAQ,IAAD,8BACjB,cAAMA,IACDE,KAAOG,IAAOH,GAAMI,UAFR,EADJ,0CAMf,WACE,OAAQ,cAACF,EAAD,2BAAeG,KAAKP,OAApB,IAA2BE,KAAMK,KAAKL,YAPjC,GAAmCM,IAAMJ,YCG3C,SAASK,EAAMT,GAC5B,IAAMU,EAAcP,EAASJ,EAAUC,EAAME,MAC7C,OACE,sBAAKD,UAAU,QAAf,UACE,wBAAQU,MAAOC,YAAO,GAAIC,IAAKb,EAAMc,IAAKC,YAAY,IAAIC,MAAM,4BAA4BC,iBAAe,IAC3G,cAACP,EAAD,OCNS,SAASQ,EAAUlB,GAChC,OACEA,EAAMmB,KAAKC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAuBP,IAAKO,EAAKP,IAAKZ,KAAMmB,EAAKnB,MAArCU,YAAO,OCF/B,SAASU,IAAO,IAAD,EACFC,mBAAS,CAC7B,CACIT,IAAK,gFACLZ,KAAMG,MAASmB,SAAS,GAAI,WAAWC,OAAO,wBAElD,CACIX,IAAK,gFACLZ,KAAMG,MAASmB,SAAS,GAAI,WAAWC,OAAO,wBAElD,CACIX,IAAK,gFACLZ,KAAMG,MAASmB,SAAS,EAAG,SAASC,OAAO,wBAE/C,CACIX,IAAK,gFACLZ,KAAMG,MAASmB,SAAS,GAAI,QAAQC,OAAO,wBAE/C,CACIX,IAAK,gFACLZ,KAAMG,MAASmB,SAAS,GAAI,UAAUC,OAAO,wBAEjD,CACIX,IAAK,gFACLZ,KAAMG,MAASmB,SAAS,EAAG,SAASC,OAAO,0BAxBzB,mBACnBN,EADmB,UA4B1B,OACI,cAAC,EAAD,CAAWA,KAAMA,IClCzB,IAYeO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a4bdef45.chunk.js","sourcesContent":["import './DateTime.scss';\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function DateTime(props) {\r\n  return (\r\n    <p className=\"date\">{props.date}</p>\r\n  )\r\n}\r\n\r\nDateTime.propTypes = {\r\n  date: PropTypes.string.isRequired\r\n}\r\n","import moment from 'moment/min/moment-with-locales';\r\nimport React from 'react'\r\n\r\nconst withDate = (Component, date) => class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.date = moment(date).fromNow();\r\n  }\r\n  \r\n  render() {\r\n    return (<Component {...this.props} date={this.date} />)\r\n  }\r\n};\r\n\r\nexport default withDate;","import './Video.scss';\r\nimport { nanoid } from 'nanoid'\r\nimport PropTypes from 'prop-types';\r\nimport DateTime from '../DateTime/DateTime';\r\nimport withDate from '../DateTimePretty/DateTimePretty';\r\n\r\nexport default function Video(props) {\r\n  const NewDateTime = withDate(DateTime, props.date);\r\n  return (\r\n    <div className=\"video\">\r\n      <iframe title={nanoid(5)} src={props.url} frameBorder=\"0\" allow=\"autoplay; encrypted-media\" allowFullScreen></iframe>\r\n      <NewDateTime />\r\n    </div>\r\n  )\r\n}\r\n\r\nVideo.propTypes = {\r\n  props: PropTypes.shape({\r\n    url: PropTypes.string.isRequired,\r\n    date: PropTypes.string.isRequired\r\n  })\r\n}","import './VideoList.scss';\r\nimport { nanoid } from 'nanoid'\r\nimport PropTypes from 'prop-types'\r\nimport Video from '../Video/Video';\r\n\r\nexport default function VideoList(props) {\r\n  return (\r\n    props.list.map(item => <Video key={nanoid(5)} url={item.url} date={item.date} />)\r\n  );\r\n}\r\n\r\nVideoList.propTypes = {\r\n  list: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      url: PropTypes.string.isRequired,\r\n      date: PropTypes.string.isRequired\r\n    })\r\n  )\r\n}\r\n\r\n\r\n","import './App.scss';\nimport moment from 'moment/min/moment-with-locales';\nimport React, { useState } from 'react';\nimport VideoList from './Components/VideoList/VideoList';\n\nexport default function App() {\n    const [list, setList] = useState([\n        {\n            url: 'https://www.youtube.com/embed/rN6nlNC9WQA?rel=0&amp;controls=0&amp;showinfo=0',\n            date: moment().subtract(13, 'seconds').format('YYYY-MM-DD HH:mm:ss')\n        },\n        {\n            url: 'https://www.youtube.com/embed/dVkK36KOcqs?rel=0&amp;controls=0&amp;showinfo=0',\n            date: moment().subtract(15, 'minutes').format('YYYY-MM-DD HH:mm:ss')\n        },\n        {\n            url: 'https://www.youtube.com/embed/xGRjCa49C6U?rel=0&amp;controls=0&amp;showinfo=0',\n            date: moment().subtract(5, 'hours').format('YYYY-MM-DD HH:mm:ss')\n        },\n        {\n            url: 'https://www.youtube.com/embed/RK1K2bCg4J8?rel=0&amp;controls=0&amp;showinfo=0',\n            date: moment().subtract(10, 'days').format('YYYY-MM-DD HH:mm:ss')\n        },\n        {\n            url: 'https://www.youtube.com/embed/TKmGU77INaM?rel=0&amp;controls=0&amp;showinfo=0',\n            date: moment().subtract(10, 'months').format('YYYY-MM-DD HH:mm:ss')\n        },\n        {\n            url: 'https://www.youtube.com/embed/TxbE79-1OSI?rel=0&amp;controls=0&amp;showinfo=0',\n            date: moment().subtract(2, 'years').format('YYYY-MM-DD HH:mm:ss')\n        },\n    ]);\n\n    return (\n        <VideoList list={list} />\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}